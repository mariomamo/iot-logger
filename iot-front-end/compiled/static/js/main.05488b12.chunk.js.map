{"version":3,"sources":["components/Chat/ChatBox/Message/message.js","components/Chat/ChatBox/ButtonsReplayBar/buttonsreplaybar.js","components/Chat/ChatBox/chatbox.js","components/Chat/SideBar/MessageChatBox/messagechatbox.js","components/Chat/SideBar/SearchBar/searchbar.js","components/Chat/SideBar/sidebar.js","components/Chat/SplashBox/splashbox.js","components/Chat/chat.js","App.js","reportWebVitals.js","index.js"],"names":["Message","message","isSended","className","hour","icon","faCheck","ButtonsReplayBar","chatId","onSend","buttonReplyes","undefined","map","buttonText","indice","onClick","type","renderButton","ChatBox","sensorType","name","messages","ref","createRef","useEffect","scrollMessageBoxToBottom","objDiv","document","getElementById","scrollTop","scrollHeight","renderTextMessage","renderSendedTextMessage","renderReceivedTextMessage","id","renderMessage","MessageChatBox","lastMessage","img","selected","useState","chatboxClassName","setChatboxClassName","chatboxInfo","setChatboxInfo","oraStyle","setOraStyle","setSelected","setNotSelected","alt","src","Search","Input","SearchBar","placeholder","enterButton","Sidebar","chatsList","changeClick","selectedMessage","forEach","index","SplashBox","Chat","port","url","selectedChat","setSelectedChat","setChatsList","client","setClient","userId","setUSerId","on","io","engine","console","log","contains","data","updateExistingMessage","getChatFromList","addNewMessage","emit","socketio","connect","push","getTNewChatTemplate","existingMessage","payload","getHour","today","Date","getHours","minutes","getMinutes","add0IfNeeded","value","getPayloadMessage","toString","list","element","filter","arrayElement","some","elemento","msg","getMessageToSend","chat","renderElement","App","root","getAttribute","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.05488b12.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\r\nimport './message.css';\r\n\r\n\r\nconst Message = ({message, isSended})=> {\r\n    if (isSended) {\r\n        return (\r\n            <div className={\"chatRow sentDiv\"}>\r\n                <div className=\"chatMessage\">\r\n                    <div>\r\n                        {message.message}\r\n                    </div>\r\n                    <div className=\"hour-box\">\r\n                        <div className=\"hour\">\r\n                            {message.hour}\r\n                        </div>\r\n                        <div className=\"check\">\r\n                            <FontAwesomeIcon icon={faCheck}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className={\"chatRow receivedDiv\"}>\r\n                <div className=\"chatMessage\">\r\n                <div>\r\n                    {message.message}\r\n                </div>\r\n                <div className=\"hour-box\">\r\n                    <div className=\"hour\">\r\n                        {message.hour}\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport { Button } from 'antd';\r\nimport './buttonsreplaybar.css';\r\n\r\nconst ButtonsReplayBar = ({chatId, onSend, buttonReplyes})=> {\r\n    const renderButton = (buttonText, indice)=> {\r\n        return <Button key={indice} onClick={() => onSend(chatId, buttonText)} type=\"primary\">{buttonText}</Button>\r\n    }\r\n\r\n    return (\r\n        <div className=\"replyBar\">\r\n            <div className=\"buttonsPanel\">\r\n                {buttonReplyes !== undefined && buttonReplyes.map((buttonText, indice) => renderButton(buttonText, indice))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ButtonsReplayBar;","import React, { createRef, useEffect } from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport './chatbox.css';\r\nimport Message from './Message/message';\r\nimport ButtonsReplayBar from './ButtonsReplayBar/buttonsreplaybar';\r\n\r\nconst ChatBox = ({sensorType, chatId, name, messages, onSend})=> {\r\n    const ref = createRef();\r\n\r\n    useEffect(() => {\r\n        scrollMessageBoxToBottom();\r\n    }, [ref])\r\n\r\n    const scrollMessageBoxToBottom = ()=> {\r\n        var objDiv = document.getElementById(\"messageContainer\");\r\n        objDiv.scrollTop = objDiv.scrollHeight;\r\n    }\r\n\r\n    const renderMessage = (message, indice)=> {\r\n        if (message !== undefined) {\r\n            switch (message.type) {\r\n                case \"text\": return renderTextMessage(message, indice);\r\n                default: return <div>NOT SUPPORTED</div>\r\n            }\r\n        }\r\n    }\r\n\r\n    const renderTextMessage = (message, indice)=> {\r\n        if (message.isSended) {\r\n            return renderSendedTextMessage(message, indice);\r\n        } else {\r\n            return renderReceivedTextMessage(message, indice);\r\n        }\r\n    }\r\n\r\n    const renderSendedTextMessage = (message, indice)=> {\r\n        return <Message key={indice} message={message} isSended={true} />\r\n    }\r\n\r\n    const renderReceivedTextMessage = (message, indice)=> {\r\n        return <Message key={indice} message={message} isSended={false} />\r\n    }\r\n\r\n    const getButtonsReplyTypes = ()=> {\r\n        if (sensorType === \"car\") {\r\n            return [\"position\", \"engine on\", \"engine off\", \"status\"]\r\n        } else if (sensorType === \"home\") {\r\n            return [\"lights on\", \"lights off\", \"activate alarm\", \"deactivate alarm\"]\r\n        } else if (sensorType === \"air-conditioner\") {\r\n            return [\"set 20°\", \"set 22°\", \"set 24°\", \"set 26°\", \"set 28°\", \"set 30°\", \"status\"]\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='chatBox'>\r\n            <div className='chatInfoHeader'>\r\n                <div>\r\n                    {name}\r\n                </div>\r\n            </div>\r\n            <div id=\"messageContainer\" ref={ref} className='messageContainer'>\r\n                {messages !== undefined && messages.map((message, indice) => renderMessage(message, indice))}\r\n            </div>\r\n            <div className='inputBox'>\r\n                <ButtonsReplayBar chatId={chatId} onSend={onSend} buttonReplyes={getButtonsReplyTypes()}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatBox;","import React, { useEffect, useState } from 'react';\r\nimport './messagechatbox.css';\r\n\r\nconst MessageChatBox = ({id, name, lastMessage, img, selected, onClick})=> {\r\n    const [chatboxClassName, setChatboxClassName] = useState(\"message\");\r\n    const [chatboxInfo, setChatboxInfo] = useState(\"messageinfo\");\r\n    const [oraStyle, setOraStyle] = useState(\"ora\");\r\n\r\n    useEffect(() => {\r\n        if (selected) {\r\n            setSelected();\r\n        } else {\r\n            setNotSelected();\r\n        }\r\n    });\r\n\r\n    const setSelected = ()=> {\r\n        setChatboxClassName(\"message selected\");\r\n        setChatboxInfo(\"messageinfo selected\");\r\n        setOraStyle(\"ora selected\");\r\n    }\r\n\r\n    const setNotSelected = ()=> {\r\n        setChatboxClassName(\"message\");\r\n        setChatboxInfo(\"messageinfo\");\r\n        setOraStyle(\"ora\");\r\n    }\r\n\r\n    const getPreviewMessage = ()=> {\r\n        return (lastMessage !== undefined && lastMessage !== null && lastMessage.message !== undefined && lastMessage.message !== null) ? lastMessage.message : \"undefined\"\r\n    }\r\n\r\n    const getHourText = ()=> {\r\n        return (lastMessage !== undefined && lastMessage !== null && lastMessage.hour !== undefined && lastMessage.hour !== null) ? lastMessage.hour : \"00:00\"\r\n    }\r\n\r\n    return (\r\n        <div onClick={() => onClick(id)} className={chatboxClassName}>\r\n            <div className='propic'>\r\n                <img alt=\"not found\" src={img}/>\r\n            </div>\r\n            <div className={chatboxInfo}>\r\n                <div className='textname'>\r\n                    {name}\r\n                </div>\r\n                <div className='messagepreview'>\r\n                    {getPreviewMessage()}\r\n                </div>\r\n            </div>\r\n            <div className={oraStyle}>\r\n                {getHourText()}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MessageChatBox;","import React from 'react';\r\nimport { Input } from 'antd';\r\nimport './searchbar.css';\r\nimport 'antd/dist/antd.css';\r\n\r\nconst { Search } = Input;\r\n\r\nconst SearchBar = ()=> {\r\n    return (\r\n        <div className='searchbox'>\r\n            <Search placeholder=\"input search text\" enterButton />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport MessageChatBox from './MessageChatBox/messagechatbox';\r\nimport SearchBar from './SearchBar/searchbar';\r\nimport './sidebar.css';\r\n\r\nconst Sidebar = ({onClick, chatsList})=> {\r\n    const changeClick = (chatId)=> {\r\n        let selectedMessage;\r\n        chatsList.forEach(message => { \r\n            if (message.selected === true) {\r\n                message.selected = false;\r\n            } if (message.chatId === chatId) {\r\n                message.selected = true;\r\n                selectedMessage = message;\r\n            }\r\n        });\r\n        onClick(selectedMessage);\r\n    }\r\n\r\n    return (\r\n        <div className='sidebar'>\r\n            <SearchBar />\r\n            {chatsList !== undefined && chatsList.map((message, index) => <MessageChatBox onClick={changeClick} key={index} id={message.chatId} messages={message.messages} name={message.name} lastMessage={message.lastMessage} img={message.img} selected={message.selected}/>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar;","import React from 'react';\r\nimport './splashbox.css'\r\n\r\nconst SplashBox = () => {\r\n    return (\r\n        <div className=\"splashBox\">\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SplashBox;","import React, { useState, useEffect} from 'react';\r\nimport ChatBox from './ChatBox/chatbox';\r\nimport Sidebar from './SideBar/sidebar';\r\nimport socketio from \"socket.io-client\";\r\nimport './chat.css';\r\nimport SplashBox from './SplashBox/splashbox';\r\n\r\nconst Chat = ({port, url})=> {\r\n    const [selectedChat, setSelectedChat] = useState({});\r\n    const [chatsList, setChatsList] = useState([]);\r\n    const [client, setClient] = useState(null);\r\n    const [userId, setUSerId] = useState(\"\");\r\n\r\n    useEffect(()=> {\r\n        if (client !== null) {\r\n            client.on(\"connect\", ()=> {\r\n                setUSerId(client.io.engine.id);\r\n            });\r\n\r\n            client.on(\"message\", (message)=> {\r\n                console.log(\"Ho ricevuto\", message);\r\n                if (contains(chatsList, message.data.chatId)) {\r\n                    updateExistingMessage(getChatFromList, chatsList, message);\r\n                } else {\r\n                    addNewMessage(message);\r\n                }\r\n                setChatsList([...chatsList]);\r\n            });\r\n        }\r\n    }, [client]);\r\n\r\n    useEffect(() => {\r\n        if (client !== null){\r\n            client.emit(\"join\", userId);\r\n        }\r\n        console.log(\"Connected with id\", userId, \"!\");\r\n    }, [userId, client])\r\n\r\n    useEffect(() => {\r\n        setClient(socketio.connect(url + \":\" + port));\r\n\r\n    //     setChatsList([\r\n    //         {\r\n    //             sensorType: \"car\",\r\n    //             chatId: \"1\",\r\n    //             name: \"Car\",\r\n    //             img: \"https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/Circle-icons-car.svg/1200px-Circle-icons-car.svg.png\",\r\n    //             lastMessage: {\r\n    //                 hour: \"20:00\",\r\n    //                 type: \"text\",\r\n    //                 isSended: false,\r\n    //                 message: \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime mollitia, molestiae quas vel sint commodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit fugiat iusto fuga praesentium optio, eaque rerum! Provident similique accusantium nemo autem. Veritatis obcaecati tenetur iure eius earum ut molestias architecto voluptate aliquam nihil, eveniet aliquid culpa officia aut! Impedit sit sunt quaerat, odit, tenetur error, harum nesciunt ipsum debitis quas aliquid. Reprehenderit, quia. Quo neque error repudiandae fuga? Ipsa laudantium molestias eos sapiente officiis modi at sunt excepturi expedita sint? Sed quibusdam recusandae alias error harum maxime adipisci amet laborum. Perspiciatis minima nesciunt dolorem! Officiis iure rerum voluptates a cumque velit quibusdam sed amet tempora. Sit laborum ab, eius fugit doloribus tenetur fugiat, temporibus enim commodi iusto libero magni deleniti quod quam consequuntur! Commodi minima excepturi repudiandae velit hic maxime doloremque. Quaerat provident commodi consectetur veniam similique ad earum omnis ipsum saepe, voluptas, hic voluptates pariatur est explicabo fugiat, dolorum eligendi quam cupiditate excepturi mollitia maiores labore suscipit quas? Nulla, placeat. Voluptatem quaerat non architecto ab laudantium modi minima sunt esse temporibus sint culpa, recusandae aliquam numquam totam ratione voluptas quod exercitationem fuga. Possimus quis earum veniam quasi aliquam eligendi, placeat qui corporis!\"\r\n    //             },\r\n    //             selected: false,\r\n    //             messages: [\r\n    //                 {\r\n    //                     hour: \"20:00\",\r\n    //                     type: \"text\",\r\n    //                     isSended: true,\r\n    //                     message: \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime mollitia, molestiae quas vel sint commodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit fugiat iusto fuga praesentium optio, eaque rerum! Provident similique accusantium nemo autem. Veritatis obcaecati tenetur iure eius earum ut molestias architecto voluptate aliquam nihil, eveniet aliquid culpa officia aut! Impedit sit sunt quaerat, odit, tenetur error, harum nesciunt ipsum debitis quas aliquid. Reprehenderit, quia. Quo neque error repudiandae fuga? Ipsa laudantium molestias eos sapiente officiis modi at sunt excepturi expedita sint? Sed quibusdam recusandae alias error harum maxime adipisci amet laborum. Perspiciatis minima nesciunt dolorem! Officiis iure rerum voluptates a cumque velit quibusdam sed amet tempora. Sit laborum ab, eius fugit doloribus tenetur fugiat, temporibus enim commodi iusto libero magni deleniti quod quam consequuntur! Commodi minima excepturi repudiandae velit hic maxime doloremque. Quaerat provident commodi consectetur veniam similique ad earum omnis ipsum saepe, voluptas, hic voluptates pariatur est explicabo fugiat, dolorum eligendi quam cupiditate excepturi mollitia maiores labore suscipit quas? Nulla, placeat. Voluptatem quaerat non architecto ab laudantium modi minima sunt esse temporibus sint culpa, recusandae aliquam numquam totam ratione voluptas quod exercitationem fuga. Possimus quis earum veniam quasi aliquam eligendi, placeat qui corporis!\"\r\n    //                 },\r\n    //                 {\r\n    //                     hour: \"20:00\",\r\n    //                     type: \"text\",\r\n    //                     isSended: false,\r\n    //                     message: \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime mollitia, molestiae quas vel sint commodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit fugiat iusto fuga praesentium optio, eaque rerum! Provident similique accusantium nemo autem. Veritatis obcaecati tenetur iure eius earum ut molestias architecto voluptate aliquam nihil, eveniet aliquid culpa officia aut! Impedit sit sunt quaerat, odit, tenetur error, harum nesciunt ipsum debitis quas aliquid. Reprehenderit, quia. Quo neque error repudiandae fuga? Ipsa laudantium molestias eos sapiente officiis modi at sunt excepturi expedita sint? Sed quibusdam recusandae alias error harum maxime adipisci amet laborum. Perspiciatis minima nesciunt dolorem! Officiis iure rerum voluptates a cumque velit quibusdam sed amet tempora. Sit laborum ab, eius fugit doloribus tenetur fugiat, temporibus enim commodi iusto libero magni deleniti quod quam consequuntur! Commodi minima excepturi repudiandae velit hic maxime doloremque. Quaerat provident commodi consectetur veniam similique ad earum omnis ipsum saepe, voluptas, hic voluptates pariatur est explicabo fugiat, dolorum eligendi quam cupiditate excepturi mollitia maiores labore suscipit quas? Nulla, placeat. Voluptatem quaerat non architecto ab laudantium modi minima sunt esse temporibus sint culpa, recusandae aliquam numquam totam ratione voluptas quod exercitationem fuga. Possimus quis earum veniam quasi aliquam eligendi, placeat qui corporis!\"\r\n    //                 }\r\n    //             ]\r\n    //         },\r\n    //         {\r\n    //             sensorType: \"home\",\r\n    //             chatId: \"2\",\r\n    //             name: \"My home\",\r\n    //             img: \"https://www.rawshorts.com/freeicons/wp-content/uploads/2017/01/blue_repicthousebase_1484336386-1.png\",\r\n    //             selected: false,\r\n    //             messages: []\r\n    //         },\r\n    //         {\r\n    //             sensorType: \"air-conditioner\",\r\n    //             chatId: \"3\",\r\n    //             name: \"Air Conditioner bed room\",\r\n    //             img: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRfe3ft1wqiQUu1Kra38EezbmQTljHkFPSPzA&usqp=CAU\",\r\n    //             selected: false,\r\n    //             messages: []\r\n    //         }\r\n    //     ]);\r\n    }, [url, port]);\r\n\r\n    const addNewMessage = (message)=> {\r\n        chatsList.push(getTNewChatTemplate(message.data, false));\r\n    }\r\n\r\n    const updateExistingMessage = (getChatFromList, chatsList, message) => {\r\n        let existingMessage = getChatFromList(chatsList, message.data.chatId);\r\n        message.data.payload.isSended = false;\r\n        existingMessage.lastMessage = message.data.payload;\r\n        existingMessage.messages.push(message.data.payload);\r\n    }\r\n\r\n    const getHour = ()=> {\r\n        let today = new Date();\r\n        let hour = today.getHours();\r\n        let minutes = today.getMinutes();\r\n        return add0IfNeeded(hour) + \":\" + add0IfNeeded(minutes);\r\n    }\r\n\r\n    const add0IfNeeded = (value)=> {\r\n        return value < 10 ? \"0\" + value : value\r\n    }\r\n\r\n    const getPayloadMessage = (type, isSended, message) => {\r\n        return {\r\n            hour: getHour(),\r\n            type: type,\r\n            isSended: isSended,\r\n            message: message\r\n        }\r\n    }\r\n\r\n    const getTNewChatTemplate = (message, isSended) => {\r\n        let payload = getPayloadMessage(message.payload.type, isSended, message.payload.message, message.payload.hour);\r\n\r\n        return {\r\n            sensorType: message.sensorType,\r\n            chatId: message.chatId.toString(),\r\n            name: message.name,\r\n            img: message.img,\r\n            lastMessage: payload,\r\n            selected: false,\r\n            messages: [payload]\r\n        }\r\n    }\r\n    \r\n    const contains = (list, element) => {\r\n        return list\r\n        .filter(arrayElement => arrayElement !== undefined)\r\n        .some(arrayElement => arrayElement.chatId === element)\r\n    }\r\n\r\n    const getChatFromList = (list, id) => {\r\n        return list\r\n        .filter(arrayElement => arrayElement !== undefined)\r\n        .filter(elemento => elemento.chatId === id)[0];\r\n    }\r\n\r\n    const handleClick = (chat)=> {\r\n        setSelectedChat(chat);\r\n    }\r\n\r\n    const getMessageToSend = (chatId, msg, type) => {\r\n        return {\r\n            userId: userId,\r\n            chatId: chatId,\r\n            payload: {\r\n                hour: getHour(),\r\n                type: type,\r\n                message: msg\r\n            }\r\n        }\r\n    }\r\n\r\n    const onSend = (chatId, msg)=> {\r\n        let currentChat = getChatFromList(chatsList, chatId);\r\n        currentChat.messages.push(getPayloadMessage(\"text\", true, msg));\r\n        setChatsList([...chatsList]);\r\n        client.emit('message', getMessageToSend(chatId, msg, \"text\"));\r\n    }\r\n\r\n    const renderElement = (selectedChat)=> {\r\n        if (selectedChat !== undefined && selectedChat.selected) {\r\n            return <ChatBox sensorType={selectedChat.sensorType} onSend={onSend} chatId={selectedChat.chatId} name={selectedChat.name} messages={selectedChat.messages} />\r\n        } else {\r\n            return <SplashBox />\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='chat'>\r\n            <Sidebar chatsList={chatsList} onClick={handleClick}/>\r\n            {renderElement(selectedChat)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat;","import './App.css';\nimport Chat from './components/Chat/chat';\n\nfunction App() {\n  const root = document.getElementById('root');\n  return (\n    <Chat url={root.getAttribute(\"url\")} port={root.getAttribute(\"port\")}/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}